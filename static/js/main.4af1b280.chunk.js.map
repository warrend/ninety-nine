{"version":3,"sources":["components/Country.js","components/Countries.js","components/Ship.js","components/Ships.js","containers/Travels.js","images/gracie.jpg","components/Intro.js","containers/App.js","registerServiceWorker.js","index.js"],"names":["Country","props","background","country","color","style","gridColumn","cLength","visits","parseInt","Math","ceil","marginBottom","alignSelf","padding","name","_jsx","children","_jsxs","Countries","sortedVisits","countries","sort","a","b","className","map","data","key","Ship","percentage","s","ship","year","floor","Ships","ships","Date","getFullYear","Travels","Component","constructor","super","this","state","loading","render","Intro","fontSize","lineHeight","marginTop","src","gracie","alt","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.4af1b280.chunk.js","sourcesContent":["import React from 'react'\nimport './Countries.css'\n\nconst Country = (props) => {\n\t//const sw = window.screen.width\n\tconst cLength = () => {\n\t\tlet visits = parseInt(props.country.visits, 10)\n\t\treturn Math.ceil((visits * 3.6) + 20)\n\t}\n\n\tconst background = props.country.color\n\n\tconst style = {\n\t\tgridColumn: '1 /' + cLength(),\n\t\tbackground: background,\n\t\tmarginBottom: '1em',\n\t\talignSelf: 'center',\n\t\tpadding: '20px 20px 20px 0'\n\t}\n\n\tconst { name, visits } = props.country\n\n\treturn (\n\t\t<div style={style}><p>{name} {visits}</p></div>\n\t)\n}\n\nexport default Country","import React from 'react'\nimport Country from './Country'\nimport './Countries.css'\n\nconst Countries = (props) => {\n\tconst sortedVisits = props.countries.sort((a, b) => {\n\t\treturn b.visits - a.visits\n\t})\n\n\treturn (\n\t\t<div className=\"countries\">\n\t\t\t{sortedVisits.map((data, key) => {\n\t\t\t\treturn <Country key={key} country={data} />\n\t\t\t})}\n\t\t</div>\n\t)\n}\n\nexport default Countries","import React from 'react'\nimport './Ship.css'\n\nconst Ship = (props) => {\n\tconst percentage = () => {\n\t\tlet s = parseInt(props.ship.year, 10)\n\t\treturn Math.floor((s - 1892) - 25)\n\t}\n\n\tconst style = {\n\t\tgridColumn: '1 /' + percentage(),\n\t\tbackground: '#009a49',\n\t\tmarginBottom: '1em',\n\t\talignSelf: 'center',\n\t\tpadding: '20px 20px 20px 0'\n\t}\n\n\tconst { name, year } = props.ship\n\treturn (\n\t\t<div style={style}>{name} {year}</div>\n\t)\n}\n\nexport default Ship","import React from 'react'\nimport Ship from './Ship'\nimport './Ships.css'\n\nconst Ships = (props) => {\n\tconst year = () => {\n\t\tlet today = new Date();\n\t\treturn today.getFullYear();\n\t}\n\treturn (\n\t\t<div>\n\t\t\t<div className=\"ships\">\n\t\t\t\t{props.ships.map((data, key) => {\n\t\t\t\t\treturn <Ship key={key} ship={data} />\n\t\t\t\t})}\n\t\t\t</div>\n\t\t\t<small>&copy;{year()} | warrend555@gmail.com</small>\n\t\t</div>\n\t)\n}\n\nexport default Ships","import React, {Component} from 'react'\nimport Countries from '../components/Countries'\nimport Ships from '../components/Ships'\nimport data from '../data/log.json'\n\nclass Travels extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tloading: true,\n\t\t\tcountries: data.countries,\n\t\t\tships: data.ships\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>Visits Per Country</h1>\n\t\t\t\t<Countries countries={this.state.countries} />\n\t\t\t\t<h1>Ships</h1>\n\t\t\t\t<Ships ships={this.state.ships} />\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Travels","export default __webpack_public_path__ + \"static/media/gracie.f76f4306.jpg\";","import React from 'react';\nimport './Intro.css';\n// import james from '../images/james.jpg';\nimport gracie from '../images/gracie.jpg';\n\nconst Intro = () => {\n  const style = {\n    fontSize: '125%',\n    lineHeight: '1.5',\n    marginTop: '1em',\n  };\n  return (\n    <div>\n      <h1>Ninety-Nine Times</h1>\n      <div className=\"zoom\">\n        <img src={gracie} alt=\"James Gracie\" />\n      </div>\n      <h2>About</h2>\n      <p style={style}>\n        When my parents' basement flooded during Christmas, we found my\n        grandfather's meticulously kept travel logs of every trip he took during\n        his lifetime. He organized the trips by date, method of travel, and\n        countries & cities visited. My grandfather traveled extensively\n        throughout South America, the Caribbean, and many other parts of the\n        world.\n      </p>\n      <p style={style}>\n        During his lifetime my grandpa left the country 99 times, traveled to 80\n        different countries, took 48 ships, and spent 1,223 days at sea. This is\n        an infographic application of his travels. Listed below are all of the\n        countries he traveled to and the number of visits, as well as all of the\n        ships he took. Some of the countries listed below are no longer\n        sovereign regions.\n      </p>\n    </div>\n  );\n};\n\nexport default Intro;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Travels from './Travels'\nimport Intro from '../components/Intro'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <Intro />\n        <Travels />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}